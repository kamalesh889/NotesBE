// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	repository "NOTESBE/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockRepository) CreateNote(req *repository.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockRepositoryMockRecorder) CreateNote(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockRepository)(nil).CreateNote), req)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(req *repository.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), req)
}

// DeleteNoteById mocks base method.
func (m *MockRepository) DeleteNoteById(noteId, userid uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNoteById", noteId, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNoteById indicates an expected call of DeleteNoteById.
func (mr *MockRepositoryMockRecorder) DeleteNoteById(noteId, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNoteById", reflect.TypeOf((*MockRepository)(nil).DeleteNoteById), noteId, userid)
}

// GetNoteById mocks base method.
func (m *MockRepository) GetNoteById(noteId, userid uint64) (*repository.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", noteId, userid)
	ret0, _ := ret[0].(*repository.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById.
func (mr *MockRepositoryMockRecorder) GetNoteById(noteId, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockRepository)(nil).GetNoteById), noteId, userid)
}

// GetNotesByKey mocks base method.
func (m *MockRepository) GetNotesByKey(userid uint64, key string) ([]repository.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByKey", userid, key)
	ret0, _ := ret[0].([]repository.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesByKey indicates an expected call of GetNotesByKey.
func (mr *MockRepositoryMockRecorder) GetNotesByKey(userid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByKey", reflect.TypeOf((*MockRepository)(nil).GetNotesByKey), userid, key)
}

// GetNotesOfUser mocks base method.
func (m *MockRepository) GetNotesOfUser(userid uint64) ([]repository.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesOfUser", userid)
	ret0, _ := ret[0].([]repository.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesOfUser indicates an expected call of GetNotesOfUser.
func (mr *MockRepositoryMockRecorder) GetNotesOfUser(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesOfUser", reflect.TypeOf((*MockRepository)(nil).GetNotesOfUser), userid)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(req *repository.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), req)
}

// ShareNoteToUser mocks base method.
func (m *MockRepository) ShareNoteToUser(noteId, senderuserid, recieveruserid uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareNoteToUser", noteId, senderuserid, recieveruserid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareNoteToUser indicates an expected call of ShareNoteToUser.
func (mr *MockRepositoryMockRecorder) ShareNoteToUser(noteId, senderuserid, recieveruserid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareNoteToUser", reflect.TypeOf((*MockRepository)(nil).ShareNoteToUser), noteId, senderuserid, recieveruserid)
}

// UpdateNoteById mocks base method.
func (m *MockRepository) UpdateNoteById(noteId, userid uint64, note string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNoteById", noteId, userid, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNoteById indicates an expected call of UpdateNoteById.
func (mr *MockRepositoryMockRecorder) UpdateNoteById(noteId, userid, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNoteById", reflect.TypeOf((*MockRepository)(nil).UpdateNoteById), noteId, userid, note)
}
